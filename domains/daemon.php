#!fruithost:permission:root
<?php
	use fruithost\Storage\Database;
	
	class DomainsDaemon {
		public function __construct() {
			$this->deleteDomains();
			$this->fixDomains();
			$this->createDomains();
			$this->reloadApache();
		}
		
		protected function deleteDomains() {
			$domains = $this->getDomains('AND `' . DATABASE_PREFIX . 'domains`.`time_deleted` IS NOT NULL');
			
			foreach($domains AS $domain) {
				print "\033[31;31m\tDelete VHost:\033[39m " . $domain->name . PHP_EOL;
				
				// @ToDo check if other domains using the same path!
				$path	= sprintf('%s%s%s', HOST_PATH, $domain->username, $domain->directory);
				
				if(is_dir($path)) {
					shell_exec(sprintf('rm -R %s', $path));
				}
				
				// Delete VHost
				if(file_exists(sprintf('/etc/fruithost/config/apache2/vhosts/10_%s.conf', $domain->name))) {
					unlink(sprintf('/etc/fruithost/config/apache2/vhosts/10_%s.conf', $domain->name));
				}
				
				// Delete SSL-VHost
				if(file_exists(sprintf('/etc/fruithost/config/apache2/vhosts/20_%s.ssl.conf', $domain->name))) {
					unlink(sprintf('/etc/fruithost/config/apache2/vhosts/20_%s.ssl.conf', $domain->name));
				}
				
				Database::delete(DATABASE_PREFIX . 'domains', [
					'id'			=> $domain->id
				]);
			}
		}
		
		protected function createDomains() {
			$domains = $this->getDomains('AND
										`' . DATABASE_PREFIX . 'domains`.`time_created` IS NULL
									AND
										`' . DATABASE_PREFIX . 'domains`.`time_deleted` IS NULL');
			
			foreach($domains AS $domain) {
				print "\033[0;32m\tCreate VHost:\033[39m " . $domain->name . PHP_EOL;
				$path		= $this->createPath($domain->username, $domain->directory);
				
				// create System user
				if(empty(shell_exec(sprintf('getent passwd %1$s', $domain->username)))) {
					shell_exec(sprintf('adduser --disabled-login --disabled-password --ingroup www-data --no-create-home --home %2$s %1$s', $domain->username, sprintf('%s%s', HOST_PATH, $domain->username)));
				}
				
				$this->createDocumentRoot($domain, $path);
				$this->createVirtualHost($domain, $path);
				$this->updateDomain($domain);
			}
		}
		
		protected function fixDomains() {
			$domains = $this->getDomains('AND
										`' . DATABASE_PREFIX . 'domains`.`time_deleted` IS NULL');
			
			foreach($domains AS $domain) {
				print "\033[0;32m\tFixing VHost:\033[39m " . $domain->name . PHP_EOL;
				$path	= $this->createPath($domain->username, $domain->directory);
			}
		}
		
		protected function createPath($username, $directory) {
			$logs = sprintf('%s%s/%s/', HOST_PATH, $username, 'logs');
			$path = sprintf('%s%s/%s/', HOST_PATH, $username, $directory);
			$user = (object) posix_getpwnam($username);
			
			chmod(HOST_PATH . $username, 0700);
				
			if(!file_exists($logs)) {
				mkdir($logs);
			}
			chmod($logs, 0700);
			chown($logs, $user->uid);
			chgrp($logs, $user->gid);
			
			if(!file_exists($path)) {
				mkdir($path);
			}
			chmod($path, 0700);
			chown($path, $user->uid);
			chgrp($path, $user->gid);
			
			return str_replace('//', '/', $path);
		}
		
		protected function getDomains($sql = '') {
			return Database::fetch('SELECT
										`' . DATABASE_PREFIX . 'domains`.*,
										`' . DATABASE_PREFIX . 'users`.`username` AS `username`
									FROM
										`' . DATABASE_PREFIX . 'domains`,
										`' . DATABASE_PREFIX . 'users`
									WHERE
										`' . DATABASE_PREFIX . 'users`.`id`=`' . DATABASE_PREFIX . 'domains`.`user_id`
									' . $sql . '
									AND
										`' . DATABASE_PREFIX . 'domains`.`type`=\'DOMAIN\'
									ORDER BY `' . DATABASE_PREFIX . 'domains`.`name` ASC', []);
		}
		
		protected function createVirtualHost($domain, $path, $grant_all = true) {
			$config = '# Generated by fruithost' . PHP_EOL;
			$config .= '<VirtualHost *:80>' . PHP_EOL;
			$config .= TAB . '# DO NOT EDIT' . PHP_EOL;
			$config .= TAB . sprintf('ServerAdmin		abuse@%s', $domain->name) . PHP_EOL;
			$config .= TAB . sprintf('DocumentRoot	%s', $path) . PHP_EOL;
			$config .= TAB . sprintf('ServerName		%s', $domain->name) . PHP_EOL;
			
			$logs = sprintf('%s%s/%s/', HOST_PATH, $domain->username, 'logs');
			$config .= TAB . sprintf('ErrorLog		%s%s_error.log', $logs, $domain->name) . PHP_EOL;
			$config .= TAB . sprintf('CustomLog		%s%s_access.log combined', $logs, $domain->name) . PHP_EOL;
			$config .= TAB . sprintf('CustomLog		%s%s_bandwidth.log common', $logs, $domain->name) . PHP_EOL;
			
			$config .= PHP_EOL;
			
			// Security
			$config .= PHP_EOL;
			$config .= TAB . '# Security' . PHP_EOL;
			$config .= TAB . '<IfModule mpm_itk_module>' . PHP_EOL;
			$config .= TAB . TAB . sprintf('AssignUserId %s www-data', $domain->username) . PHP_EOL;
			$config .= TAB . '</IfModule>' . PHP_EOL;
			
			// @ToDo Make settings for that
			#$config .= PHP_EOL;
			#$config .= TAB . '<IfModule headers>' . PHP_EOL;
			#$config .= TAB . TAB . 'Header set X-Frame-Options: "SAMEORIGIN"' . PHP_EOL;
			#$config .= TAB . '</IfModule>' . PHP_EOL;

			// Error Pages
			$config .= PHP_EOL;
			$config .= TAB . '<IfModule mod_alias.c>' . PHP_EOL;
			$config .= TAB . TAB . '# Define Error Pages' . PHP_EOL;
			foreach([
				100, 101,
				400, 401, 403, 404, 405, 408, 410, 411, 412, 413, 414, 415,
				500, 501, 502, 503, 504, 505, 506
			] AS $code) {
				$config .= TAB . TAB . sprintf('Alias /errors/%1$s.html /etc/fruithost/placeholder/errors/%1$s.html', $code) . PHP_EOL;
			}
			$config .= TAB . '</IfModule>' . PHP_EOL;
			
			// PHP-FPM
			
			// @ToDo
			$fpm = '[' . $domain->username. ']
prefix = /var/fruithost/users/$pool

user = $pool
group = www-data

listen = /var/fruithost/users/.sockets/$pool.sock

listen.owner = $pool
listen.group = www-data
listen.mode = 0660

process.dumpable = yes
decorate_workers_output = yes
catch_workers_output = yes

pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3

;chroot = /
chdir = /

;access.log = log/$pool.access.log
decorate_workers_output = yes
catch_workers_output = yes
php_flag[display_errors] = on
php_admin_value[error_log] = logs/php_error.log
php_admin_flag[log_errors] = on
php_value[session.save_path] = temp/
php_admin_value[open_basedir] = /var/fruithost/users/$pool

; Opcache
php_admin_flag[opcache.enable] = 1
php_admin_flag[opcache.validate_permission] = 1
php_admin_value[opcache.restrict_api] = /var/fruithost/users/$pool';

			file_put_contents(sprintf('/etc/fruithost/config/php/users/%s.conf', $domain->username), $fpm);
			
			# PHP-FPM
			$config .= PHP_EOL;
			$config .= TAB . '# PHP-FPM' . PHP_EOL;
			$config .= TAB . '<IfModule !mod_php8.c>' . PHP_EOL;
			$config .= TAB . TAB . '<IfModule proxy_fcgi_module>' . PHP_EOL;
			$config .= TAB . TAB . TAB . '# Forward Auth-Header' . PHP_EOL;
			$config .= TAB . TAB . TAB . '<IfModule setenvif_module>' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . 'SetEnvIfNoCase ^Authorization$ "(.+)" HTTP_AUTHORIZATION=$1' . PHP_EOL;
			$config .= TAB . TAB . TAB . '</IfModule>' . PHP_EOL;
			$config .= PHP_EOL;
			$config .= TAB . TAB . TAB . '# Define Proxy' . PHP_EOL;
			$config .= TAB . TAB . TAB . sprintf('<Proxy "unix:/var/fruithost/users/.sockets/%1$s.sock|fcgi://user-%1$s">', $domain->username) . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . 'ProxySet disablereuse=on' . PHP_EOL;
			$config .= TAB . TAB . TAB . '</Proxy>' . PHP_EOL;
			$config .= PHP_EOL;
			$config .= TAB . TAB . TAB . '# When .php-Files will be visited' . PHP_EOL;
			$config .= TAB . TAB . TAB . '<FilesMatch "\.php$">' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . '# Remove old handlers (if exists)' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . 'RemoveHandler		.php' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . 'ProxyFCGIBackendType FPM' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . 'ProxyFCGISetEnvIf "true" DOCUMENT_ROOT "%{reqenv:DOCUMENT_ROOT}"' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . 'ProxyFCGISetEnvIf "true" CONTEXT_DOCUMENT_ROOT "%{reqenv:DOCUMENT_ROOT}"' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . 'ProxyFCGISetEnvIf "true" PATH_INFO "%{PATH_INFO}"' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . 'ProxyFCGISetEnvIf "true" PATH_TRANSLATED "%{reqenv:DOCUMENT_ROOT}%{reqenv:PATH_INFO}%{reqenv:SCRIPT_NAME}"' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . '#ProxyFCGISetEnvIf "true" REQUEST_URI "${REQUEST_URI}"' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . 'ProxyFCGISetEnvIf "true" SCRIPT_NAME "%{reqenv:SCRIPT_NAME}"' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . 'ProxyFCGISetEnvIf "true" SCRIPT_FILENAME "%{reqenv:SCRIPT_FILENAME}"' . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . PHP_EOL;
			$config .= TAB . TAB . TAB . TAB . sprintf('SetHandler proxy:fcgi://user-%1$s', $domain->username) . PHP_EOL;
			$config .= TAB . TAB . TAB . '</FilesMatch>' . PHP_EOL;
			
			$config .= TAB . TAB . '</IfModule>' . PHP_EOL;			
			$config .= TAB . '</IfModule>' . PHP_EOL;
			$config .= TAB . PHP_EOL;
			
			// Directory
			$config .= PHP_EOL;
			$config .= TAB . '# Accessibility' . PHP_EOL;
			$config .= TAB . sprintf('<Directory %s>', $path) . PHP_EOL;
			$config .= TAB . TAB . 'Options +FollowSymLinks -Indexes' . PHP_EOL;
			$config .= TAB . TAB . 'AllowOverride All' . PHP_EOL;
			
			if($grant_all) {
				$config .= TAB . TAB . 'Require all granted' . PHP_EOL;
			}
			
			$config .= TAB . '</Directory>' . PHP_EOL;
			
			$config .= PHP_EOL;
			$config .= TAB .  '<Files ~ "(^(?!\.fruithost)\.|php\.ini)">' . PHP_EOL;
			$config .= TAB . TAB . 'Require all denied' . PHP_EOL;
			$config .= TAB . '</Files>' . PHP_EOL;
			
			$config .= '</VirtualHost>' . PHP_EOL;
			
			file_put_contents(sprintf('/etc/fruithost/config/apache2/vhosts/10_%s.conf', $domain->name), $config);
		}
		
		protected function createDocumentRoot($domain, $path) {
			$template = sprintf('%s%s%s/domains', dirname(PATH), DS, 'modules');
			
			if(!file_exists(sprintf('%sindex.php', $path)) && !file_exists(sprintf('%sindex.html', $path))) {
				file_put_contents(sprintf('%sindex.html', $path), str_replace([
					'$DOMAIN'
				], [
					$domain->name
				], file_get_contents($template . '/vhost/index.html')));
			}
		}
		
		protected function updateDomain($domain) {
			Database::update(DATABASE_PREFIX . 'domains', 'id', [
				'id'			=> $domain->id,
				'time_created'	=> date('Y-m-d H:i:s', time()),
				'time_deleted'	=> NULL
			]);
		}
		
		protected function reloadApache() {
			print shell_exec(sprintf('service php%d.%d-fpm restart', PHP_MAJOR_VERSION, PHP_MINOR_VERSION));
			print shell_exec('service apache2 reload');
		}
	}
	
	new DomainsDaemon();
?>